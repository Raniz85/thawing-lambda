/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package benchmark;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.Executors;
import java.util.stream.Collectors;

import software.amazon.awssdk.regions.Region;
import software.amazon.awssdk.services.lambda.LambdaClient;


public class App {

    public static void main(String[] args) {
        var lambda = LambdaClient.builder()
                .region(Region.EU_NORTH_1)
                .build();
        var results = new ConcurrentHashMap<String, List<Double>>();
        try (var executor = Executors.newCachedThreadPool()) {
            for (String functionName : args) {
                var lambdaFunction = new LambdaFunction(lambda, functionName);
                results.put(functionName, lambdaFunction.benchmark(executor, 30, 200));
            }
        }
        System.out.println();
        System.out.println("Averages:");
        results.entrySet().stream().forEach(entry -> {
            var name = entry.getKey();
            var times = entry.getValue();
            try (FileOutputStream fstream = new FileOutputStream(name);
                 PrintWriter writer = new PrintWriter(fstream)) {
                writer.write(times.stream().map(String::valueOf).collect(Collectors.joining("\n")));
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
            System.out.printf("%45s: %5.3f ms%n", name, times.stream().mapToDouble(it -> it).sum() / times.size());
        });
    }
}
